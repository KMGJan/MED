---
title: "Introduction to R"
subtitle: "Marine Ecosystem Dynamics"
author: "Kinlan Jan, Baptiste Serandour"
title-slide-attributes: 
      data-background-image: "../../assets/images/background.svg"
      data-background-position: top
format: 
   revealjs:
    fontsize: 25pt
    theme: dark
    slide-number: true
    show-slide-number: all
    chalkboard: true
    logo: "../../assets/images/SU_logo.png"

knitr:
  opts_chunk:
    echo: true
    collapse: true
    comment: "#>"
    fig.align: "center"
---

## Plan for today's lecture

::: {layout-ncol="3" style="text-align: center;"}
<img src="../../assets/images/Rlogo.svg" width="50%"/>

<img src="../../assets/images/Rstudio.svg" width="50%"/>

<img src="../../assets/images/readr.png" width="50%"/>
:::

-   The `R` syntax
-   The `R studio` software
-   Variables, functions and vectors
-   Importing data using the `readr` package

## Why using R?

::: columns
::: {.column width="50%"}
### Pro

-   Free
-   Open source
-   Reproducible science

```{r}
#| eval: true
#| echo: true
# You can keep track of all the data analysis steps
2 + 2 + 3       # step 1
log(2 + 2 + 3)  # step 2
```
:::

::: {.column width="50%"}
### Cons

-   Scary
-   Syntax

```{r}
#| eval: false
#| echo: true
# This can be scary
library(ggplot2) ; library(dplyr) ; set.seed(123)
tibble(Month = sample(month.abb, 100, replace = TRUE),
       Genus = sample(c("Acartia", "Temora", "Centropages", "Pseudocalanus"), 100, replace = T),
       Abundance = rnorm(100,12,7)) |> 
  group_by(Month, Genus) |> 
  summarise(Avg_abundance = mean(Abundance, na.rm = T)) |> 
 
  ggplot(aes(x = Genus, y = Avg_abundance)) +
    geom_boxplot()
```
:::
:::

##  {background-color="black" background-image="../../assets/images/Screenshot_Rstructure.png"}

## R is open and free

This means that people have worked on it and created tools and functions that everyone can use !

::: incremental
-   R base functions (already implemented and loaded when starting a new session): e.g., `plot()`, `+`, `-`, `sin()`
-   Additional functions (we need to load): e.g. `ggplot()`, `select()`, ...
:::

## How to install and load packages

-   A package need to be installed only once
-   To use functions within a package call it using `library()`

```{r}
#| eval: false
#| echo: true
install.packages("PackageName")
library(PackageName)
```

## R syntax

::: columns
::: {.column width="60%"}

### R as a calculator

-   R can resolve "basic" operation

```{r}
#| eval: true
#| echo: true

2 + 2
3 * 4
(5 + 2) * (4 - 1)
```



-   And more complex operation

```{r}
#| eval: true
#| echo: true
sin(60)
log(10)
```
:::

::: {.column width="30%"}
<img src="../../assets/images/calculator.png" style="width:90%;"/>
:::
:::

## Variables


Variables in R can be of several types :

-   Logical: `TRUE` or `FALSE`
-   Numeric: `3.1` or `4`
-   Character: `Example`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: 1|2|3
variable_1 <- 4.3
variable_2 <- c(1, 2, 3)
variable_3 <- "text"
```


##

To assign a value to a variable, several options exist

* `<-` e.g. `a <- 2`
* `->` e.g. `2 -> a`
* `assign()` e.g. `assign("a", 2)`
* `=` e.g. `a = 2`

.   .   .

Assigning the same value for multiple variable

```{r}
#| echo: true
#| eval: false
variable_4 <- variable_5 <- variable_6 <- "Value"
```



## Functions

-   All functions have the same structure but the number of argument may change `function_name(argument1, ...)`

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: 1|2
log(10)
plot(x, y)
```

-   To know what arguments are needed, we can always refer to the manuals using `?` before the function

```{r}
#| eval: false
#| echo: true
?plot()
```

::: {style="text-align:center"}
<img src="../../assets/images/Plot_help.png" style="width:70%;"/>
:::

## If you want to go a step further

-   You can define your own functions:

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: 1,3|2
my_addition <- function(parameter_1, parameter_2, ...){
  parameter_1 + parameter_2
}

```

.   .   .

-   And compare if this is equal to the base R functions:

```{r}
#| eval: true
#| echo: true
my_addition(parameter_1 = 1, parameter_2 = 2) == 1 + 2
```

-   Note the logical operations are written as follow:
    -   is equal: `==`
    -   is different: `!=`

## Vectors

-   Vectors can be created using different functions

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: 1,2|3,4|5,6|7,8
(vector_1 <- c(1, 3, 6))
(vector_2 <- seq(from = 2, to = 10, by = 3))
(vector_3 <- rep("Yellow", 3))
(vector_4 <- c(vector_1, vector_2))
```
.   .   .

-   R works with vectors from which we can do our calculation

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: 1,2|3,4|5,6
vector_1 * 2
mean(vector_4)
class(vector_3)
```

## Importing data

-   The best and most efficient way to import data is to use the `readr` packages

::: incremental
-   The main function has this form: `read_*` where `*` can be:
    -   `csv` - comma-separated values
    -   `tsv` - tab-separated values
    -   `csv2` - semicolon-separated values with , as the decimal mark
    -   `delim` - delimited files
:::

![](../../assets/images/readr.png){fig-align="center"}

## Example

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: 1|3|4|5,6,7,8,9,10,11,12,13
library(readr)

Example_1 <- readr::read_csv("./../../assets/data/Example_1.csv") 
head(Example_1)

```

.   .   .

```{r}
#| eval: true
#| echo: true
tail(Example_1)
```

## Plan for tomorrow

::: {layout-ncol="5"}
![](../../assets/images/tidyverse.svg)

![](../../assets/images/pipe.svg)

![](../../assets/images/tidyr.svg)

![](../../assets/images/dplyr.svg)

![](../../assets/images/ggplot2.svg)
:::

-   Introduction to `tidyverse`
-   Pipe the data using `magrittr`
-   Clean the data using `tidyr`
-   Arrange the data using `dplyr`
-   Plot using `ggplot2`

## Do not hesitate to use google to get help !

If you have an issue with something, you are probably not the first and someone asked a solution on a forum !

::: {layout-ncol="3" style="text-align: center; vertical-align: bottom;"}
<img src="../../assets/images/google.svg" width="100%"/>

<img src="../../assets/images/stackoverflow.jpg" width="100%"/>

<img src="../../assets/images/datanovia.png" width="60%"/>
:::
