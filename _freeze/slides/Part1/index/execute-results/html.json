{
  "hash": "79e2c0c933c23a1ac62ae0a158b97f75",
  "result": {
    "markdown": "---\ntitle: \"Introduction to R\"\nsubtitle: \"Marine Ecosystem Dynamics\"\nauthor: \"Kinlan Jan, Baptiste Serandour\"\ntitle-slide-attributes: \n      data-background-image: \"../../assets/images/background.svg\"\n      data-background-position: top\nformat: \n   revealjs:\n    fontsize: 25pt\n    theme: dark\n    slide-number: true\n    show-slide-number: all\n    chalkboard: true\n    logo: \"../../assets/images/SU_logo.png\"\n---\n\n\n## Plan for today's lecture\n\n::: {layout-ncol=\"3\" style=\"text-align: center;\"}\n<img src=\"../../assets/images/Rlogo.svg\" width=\"50%\"/>\n\n<img src=\"../../assets/images/Rstudio.svg\" width=\"50%\"/>\n\n<img src=\"../../assets/images/readr.png\" width=\"50%\"/>\n:::\n\n-   The `R` syntax\n-   The `R studio` software\n-   Variables, functions and vectors\n-   Importing data using the `readr` package\n\n## Why using R?\n\n::: columns\n::: {.column width=\"50%\"}\n### Pro\n\n-   Free\n-   Open source\n-   Reproducible science\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You can keep track of all the data analysis steps\n2 + 2 + 3       # step 1\nlog(2 + 2 + 3)  # step 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n[1] 1.94591\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n### Cons\n\n-   Scary\n-   Syntax\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This can be scary\nlibrary(ggplot2) ; library(dplyr) ; set.seed(123)\ntibble(Month = sample(month.abb, 100, replace = TRUE),\n       Genus = sample(c(\"Acartia\", \"Temora\", \"Centropages\", \"Pseudocalanus\"), 100, replace = T),\n       Abundance = rnorm(100,12,7)) |> \n  group_by(Month, Genus) |> \n  summarise(Avg_abundance = mean(Abundance, na.rm = T)) |> \n \n  ggplot(aes(x = Genus, y = Avg_abundance)) +\n    geom_boxplot()\n```\n:::\n\n:::\n:::\n\n##  {background-color=\"black\" background-image=\"../../assets/images/Screenshot_Rstructure.png\"}\n\n## R is open and free\n\nThis means that people have worked on it and created tools and functions that everyone can use !\n\n::: incremental\n-   R base functions (already implemented and loaded when starting a new session): e.g., `plot()`, `+`, `-`, `sin()`\n-   Additional functions (we need to load): e.g. `ggplot()`, `select()`, ...\n:::\n\n## How to install and load packages\n\n-   A package need to be installed only once\n-   To use functions within a package call it using `library()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"PackageName\")\nlibrary(PackageName)\n```\n:::\n\n\n## R syntax\n\n::: columns\n::: {.column width=\"60%\"}\n### R as a calculator\n\n-   R can resolve \"basic\" operation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n3 * 4\n(5 + 2) * (4 - 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n[1] 12\n[1] 21\n```\n:::\n:::\n\n\n-   And more complex operation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsin(60)\nlog(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.3048106\n[1] 2.302585\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n<img src=\"../../assets/images/calculator.png\" style=\"width:90%;\"/>\n:::\n:::\n\n## Variables\n\n\nVariables in R can be of several types :\n\n-   Logical: `TRUE` or `FALSE`\n-   Numeric: `3.1` or `4`\n-   Character: `Example`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|2|3\"}\nvariable_1 <- 4.3\nvariable_2 <- c(1, 2, 3)\nvariable_3 <- \"text\"\n```\n:::\n\n\n.   .   .\n\n::: {.callout-tip title=\"Assigning the same value for multiple variable\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_4 <- variable_5 <- variable_6 <- \"Value\"\n```\n:::\n\n:::\n\n\n## Functions\n\n-   All functions have the same structure but the number of argument may change `function_name(argument1, ...)`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|2\"}\nlog(10)\nplot(x, y)\n```\n:::\n\n\n-   To know what arguments are needed, we can always refer to the manuals using `?` before the function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?plot()\n```\n:::\n\n\n::: {style=\"text-align:center\"}\n<img src=\"../../assets/images/Plot_help.png\" style=\"width:70%;\"/>\n:::\n\n## If you want to go a step further\n\n-   You can define your own functions:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,3|2\"}\nmy_addition <- function(parameter_1, parameter_2, ...){\n  parameter_1 + parameter_2\n}\n```\n:::\n\n\n-   And compare if this is equal to the base R functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_addition(parameter_1 = 1, parameter_2 = 2) == 1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n-   Note the logical operations are written as follow:\n    -   is equal: `==`\n    -   is different: `!=`\n\n## Vectors\n\n-   Vectors can be created using different functions\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,2|3,4|5,6|7,8\"}\n(vector_1 <- c(1, 3, 6))\n(vector_2 <- seq(from = 2, to = 10, by = 3))\n(vector_3 <- rep(\"Yellow\", 3))\n(vector_4 <- c(vector_1, vector_2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 6\n[1] 2 5 8\n[1] \"Yellow\" \"Yellow\" \"Yellow\"\n[1] 1 3 6 2 5 8\n```\n:::\n:::\n\n\n-   R works with vectors from which we can do our calculation\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1,2|3,4|5,6\"}\nvector_1 * 2\nmean(vector_4)\nclass(vector_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6 12\n[1] 4.166667\n[1] \"character\"\n```\n:::\n:::\n\n\n## Importing data\n\n-   The best and most efficient way to import data is to use the `readr` packages\n\n::: incremental\n-   The main function has this form: `read_*` where `*` can be:\n    -   `csv` - comma-separated values\n    -   `tsv` - tab-separated values\n    -   `csv2` - semicolon-separated values with , as the decimal mark\n    -   `delim` - delimited files\n:::\n\n![](../../assets/images/readr.png){fig-align=\"center\"}\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|2|3|4|5,6,7,8,9,10,11,12\"}\nlibrary(readr)\n\nExample_1 <- readr::read_csv(\"./../../assets/data/Example_1.csv\") \nhead(Example_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  Month Genus         Abundance\n  <chr> <chr>             <dbl>\n1 Dec   Centropages      -0.552\n2 Apr   Centropages      12.5  \n3 Feb   Centropages      18.4  \n4 Sep   Acartia          25.6  \n5 Mar   Pseudocalanus     9.70 \n6 Jul   Temora            8.90 \n```\n:::\n:::\n\n\n.   .   .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(Example_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  Month Genus         Abundance\n  <chr> <chr>             <dbl>\n1 Jan   Pseudocalanus     22.7 \n2 Feb   Acartia           27.6 \n3 Aug   Acartia            7.75\n4 Jan   Centropages       17.0 \n5 Feb   Centropages        5.95\n6 Aug   Temora            17.2 \n```\n:::\n:::\n\n\n## Plan for tomorrow\n\n::: {layout-ncol=\"5\"}\n![](../../assetsassets/images/tidyverse.svg)\n\n![](../../assets/images/pipe.svg)\n\n![](../../assets/images/tidyr.svg)\n\n![](../../assets/images/dplyr.svg)\n\n![](../../assets/images/ggplot2.svg)\n:::\n\n-   Introduction to `tidyverse`\n-   Pipe the data using `magrittr`\n-   Clean the data using `tidyr`\n-   Arrange the data using `dplyr`\n-   Plot using `ggplot2`\n\n## Do not hesitate to use google to get help !\n\nIf you have an issue with something, you are probably not the first and someone asked a solution on a forum !\n\n::: {layout-ncol=\"3\" style=\"text-align: center; vertical-align: bottom;\"}\n<img src=\"../../assets/images/google.svg\" width=\"100%\"/>\n\n<img src=\"../../assets/images/stackoverflow.jpg\" width=\"100%\"/>\n\n<img src=\"../../assets/images/datanovia.png\" width=\"60%\"/>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}